"""
**Enunciado del Ejercicio: Implementación y Evaluación de un Modelo SVM**

**Objetivo:**

Implementar una función en Python que entrene un modelo de Máquinas de Vectores de Soporte (SVM) utilizando la clase `SVC` de la biblioteca `sklearn.svm`. La función deberá realizar predicciones sobre un conjunto de prueba y evaluar el rendimiento del modelo utilizando las siguientes métricas: precisión (`accuracy_score`), matriz de confusión (`confusion_matrix`) y reporte de clasificación (`classification_report`). Finalmente, los resultados de la evaluación deberán devolverse en un diccionario. Además, se requiere la implementación de pruebas unitarias (`unittest`) para asegurar la correcta funcionalidad de la implementación.

**Instrucciones:**

1.  Implementa una función llamada `entrenar_y_evaluar_svm(X_train, y_train, X_test, y_test)` que realice las siguientes acciones:
    * Entrene un modelo `SVC` con los siguientes parámetros: `kernel='rbf'`, `C=10.0`, `gamma='scale'`, y `random_state=42`.
    * Realice predicciones sobre el conjunto de datos de prueba `X_test`.
    * Calcule la precisión del modelo utilizando `accuracy_score`.
    * Calcule la matriz de confusión utilizando `confusion_matrix`.
    * Genere el reporte de clasificación utilizando `classification_report`.
    * Devuelva un diccionario con las siguientes claves y valores:
        * `"predicciones"`: Un array de NumPy con las predicciones del modelo.
        * `"accuracy"`: La precisión del modelo en los datos de prueba (un valor float).
        * `"matriz_confusion"`: La matriz de confusión (un array de NumPy).
        * `"reporte"`: El reporte de clasificación (una cadena de texto).

2.  Utiliza el dataset de `digits` de la biblioteca `sklearn.datasets`, el cual contiene imágenes de números escritos a mano.

3.  Asegúrate de que el modelo entrenado alcance una precisión de al menos el 90% en el conjunto de prueba.

4.  Implementa una clase de pruebas unitarias (`unittest.TestCase`) llamada `TestSVM` que contenga al menos una prueba (`test_entrenar_y_evaluar_svm`) para verificar la correcta implementación de la función `entrenar_y_evaluar_svm`. Esta prueba debe asegurar que la función devuelve un diccionario con las claves esperadas, que las predicciones son un array de NumPy, que la precisión es un valor entre 0 y 1, que la matriz de confusión tiene las dimensiones correctas y que la precisión del modelo es igual o superior al 90%.
"""
import unittest  # Importa el módulo unittest para realizar pruebas unitarias.
from sklearn.datasets import load_digits  # Importa la función load_digits para cargar el dataset de dígitos.
from sklearn.model_selection import train_test_split  # Importa train_test_split para dividir los datos.
import numpy as np  # Importa la biblioteca NumPy para trabajar con arrays.
from sklearn.svm import SVC  # Importa la clase SVC para implementar el modelo de Máquinas de Vectores de Soporte (SVM).
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report  # Importa métricas de evaluación.

def entrenar_y_evaluar_svm(X_train, y_train, X_test, y_test):
    """
    Entrena un modelo de Máquinas de Vectores de Soporte (SVM) utilizando la implementación
    de Support Vector Classification (SVC) de la biblioteca scikit-learn (sklearn).
    Realiza predicciones sobre un conjunto de datos de prueba y evalúa el rendimiento
    del modelo utilizando métricas comunes de clasificación.

    Args:
        X_train (np.ndarray): Matriz de características del conjunto de entrenamiento.
        y_train (np.ndarray): Vector de etiquetas del conjunto de entrenamiento.
        X_test (np.ndarray): Matriz de características del conjunto de prueba.
        y_test (np.ndarray): Vector de etiquetas del conjunto de prueba.

    Returns:
        dict: Un diccionario que contiene los siguientes resultados de la evaluación:
            - "predicciones" (np.ndarray): Array con las predicciones realizadas por el modelo
                                             sobre el conjunto de prueba.
            - "accuracy" (float): Precisión del modelo, calculada como la proporción de
                                  predicciones correctas en el conjunto de prueba.
            - "matriz_confusion" (np.ndarray): Matriz de confusión que muestra el número de
                                                verdaderos positivos, verdaderos negativos,
                                                falsos positivos y falsos negativos para cada clase.
            - "reporte" (str): Reporte de clasificación que incluye precisión, recall,
                               f1-score y support para cada clase, así como métricas agregadas.
    """
    # Inicializar el modelo SVC (Support Vector Classification) con los parámetros especificados.
    modelo_svm = SVC(kernel='rbf', C=10.0, gamma='scale', random_state=42)
    # - kernel='rbf': Especifica el kernel de función de base radial, adecuado para datos no lineales.
    # - C=10.0: Parámetro de regularización, controla el equilibrio entre maximizar el margen y minimizar el error de clasificación.
    # - gamma='scale': Define el coeficiente del kernel. 'scale' es una opción recomendada que se ajusta a la escala de los datos.
    # - random_state=42: Semilla aleatoria para asegurar la reproducibilidad de los resultados.

    # Entrenar el modelo SVM utilizando los datos de entrenamiento.
    # El método 'fit' aprende la relación entre las características (X_train) y las etiquetas (y_train).
    modelo_svm.fit(X_train, y_train)

    # Realizar predicciones sobre el conjunto de datos de prueba (X_test).
    # El método 'predict' utiliza el modelo entrenado para asignar etiquetas a las nuevas muestras.
    predicciones = modelo_svm.predict(X_test)

    # Calcular la precisión del modelo comparando las predicciones con las etiquetas reales del
    # conjunto de prueba (y_test).
    accuracy = accuracy_score(y_test, predicciones)

    # Generar la matriz de confusión para visualizar el rendimiento del clasificador por clase.
    # La matriz muestra las predicciones correctas e incorrectas para cada una de las clases.
    matriz_confusion = confusion_matrix(y_test, predicciones)

    # Generar el reporte de clasificación, que proporciona métricas detalladas para cada clase,
    # incluyendo precisión (precision), recall (sensibilidad), f1-score (media armónica de precisión y recall)
    # y el número de muestras en cada clase (support). También incluye métricas agregadas como macro avg y weighted avg.
    reporte = classification_report(y_test, predicciones)

    # Devolver los resultados de la evaluación en un diccionario.
    resultados = {
        "predicciones": predicciones,
        "accuracy": accuracy,
        "matriz_confusion": matriz_confusion,
        "reporte": reporte,
    }
    return resultados

class TestSVM(unittest.TestCase):
    """
    Clase que contiene las pruebas unitarias para verificar la correcta implementación
    de la función 'entrenar_y_evaluar_svm'. Utiliza el framework 'unittest' de Python.
    """
    def setUp(self):
        """
        Método que se ejecuta antes de cada prueba. Se utiliza para preparar los datos
        necesarios para las pruebas, en este caso, cargar el dataset de dígitos y dividirlo
        en conjuntos de entrenamiento y prueba.
        """
        # Cargar el dataset de dígitos escritos a mano utilizando la función 'load_digits' de scikit-learn.
        # Este dataset contiene imágenes de números del 0 al 9 representadas como arrays de píxeles.
        digits = load_digits()
        self.X = digits.data  # Características (matriz de píxeles de las imágenes).
        self.y = digits.target  # Etiquetas (los números que representan las imágenes).

        # Dividir el dataset en conjuntos de entrenamiento (80%) y prueba (20%).
        # 'train_test_split' es una función de scikit-learn que realiza esta división de forma aleatoria.
        # - test_size=0.2: Especifica que el 20% de los datos se utilizará para el conjunto de prueba.
        # - random_state=42: Semilla aleatoria para asegurar que la división sea la misma cada vez que
        #                    se ejecutan las pruebas, lo que garantiza la reproducibilidad.
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(
            self.X, self.y, test_size=0.2, random_state=42
        )

    def test_entrenar_y_evaluar_svm(self):
        """
        Método de prueba que verifica el comportamiento de la función 'entrenar_y_evaluar_svm'.
        Realiza varias aserciones para asegurar que la función devuelve los resultados esperados
        y que el rendimiento del modelo cumple con los criterios definidos.
        """
        # Llamar a la función que se va a probar, pasando los conjuntos de entrenamiento y prueba.
        resultados = entrenar_y_evaluar_svm(
            self.X_train, self.y_train, self.X_test, self.y_test
        )

        # Verificar que el diccionario de resultados contenga todas las claves esperadas:
        # 'predicciones', 'accuracy', 'matriz_confusion' y 'reporte'.
        self.assertIn("predicciones", resultados)
        self.assertIn("accuracy", resultados)
        self.assertIn("matriz_confusion", resultados)
        self.assertIn("reporte", resultados)

        # Verificar que las 'predicciones' sean un array de NumPy, lo cual es el formato esperado
        # para las predicciones de modelos de scikit-learn.
        self.assertIsInstance(resultados["predicciones"], np.ndarray)

        # Verificar que la 'accuracy' sea un valor flotante entre 0 y 1, ya que representa una proporción.
        self.assertGreaterEqual(resultados["accuracy"], 0)
        self.assertLessEqual(resultados["accuracy"], 1)

        # Verificar que la 'matriz_confusion' tenga las dimensiones correctas. La forma de la matriz
        # debe ser (n_clases, n_clases), donde n_clases es el número de clases únicas en el conjunto de prueba.
        num_clases = len(np.unique(self.y_test))
        self.assertEqual(resultados["matriz_confusion"].shape, (num_clases, num_clases))

        # Verificar que la precisión del modelo en el conjunto de prueba sea al menos del 90% (0.9).
        # Este es un criterio de rendimiento especificado en las instrucciones del ejercicio.
        self.assertGreaterEqual(resultados["accuracy"], 0.9)

if __name__ == '__main__':
    """
    Bloque principal que se ejecuta cuando el script se llama directamente.
    Carga el dataset, divide los datos, entrena y evalúa el modelo SVM,
    muestra los resultados y luego ejecuta las pruebas unitarias.
    """
    # Cargar el dataset de dígitos escritos a mano.
    digits = load_digits()
    X = digits.data  # Características (los valores de los píxeles de las imágenes).
    y = digits.target  # Etiquetas (el número que representa cada imagen).

    # Dividir el dataset en conjuntos de entrenamiento y prueba para evaluar el rendimiento del modelo en datos no vistos.
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Llamar a la función principal para entrenar y evaluar el modelo SVM con los datos preparados.
    resultados = entrenar_y_evaluar_svm(X_train, y_train, X_test, y_test)

    # Mostrar los resultados de la evaluación del modelo.
    print("Precisión del modelo:", resultados["accuracy"])
    print("Matriz de Confusión:\n", resultados["matriz_confusion"])
    print("Reporte de Clasificación:\n", resultados["reporte"])

    # Crear un conjunto de pruebas a partir de la clase 'TestSVM'.
    suite = unittest.TestLoader().loadTestsFromTestCase(TestSVM)
    # Ejecutar las pruebas unitarias con un nivel de verbosidad de 2 (muestra más detalles sobre los resultados de las pruebas).
    unittest.TextTestRunner(verbosity=2).run(suite)
