from typing import List, Optional
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

# Clase que representa un proyecto con sus atributos clave
class Project:
    def __init__(
        self,
        name: str,
        team_size: int,
        budget_k: float,
        duration_months: int,
        realtime_required: bool,
        needs_offline: bool,
        target_users: str,
        recommended_platform: Optional[str] = None
    ):
        # Nombre identificador del proyecto
        self.name = name
        # Tamaño del equipo en número de personas
        self.team_size = team_size
        # Presupuesto estimado en miles de dólares
        self.budget_k = budget_k
        # Duración prevista del proyecto en meses
        self.duration_months = duration_months
        # Si el proyecto requiere procesamiento en tiempo real
        self.realtime_required = realtime_required
        # Si el proyecto necesita funcionar offline
        self.needs_offline = needs_offline
        # Tipo de usuarios objetivo: 'local', 'empresa', 'global', etc.
        self.target_users = target_users
        # Plataforma recomendada: 'web', 'mobile', 'desktop' (solo para datos de entrenamiento)
        self.recommended_platform = recommended_platform

    def to_features(self):
        """
        Convierte los atributos del proyecto en una lista de características numéricas
        lista: [team_size, budget_k, duration_months, realtime_required, needs_offline, target_users]
        """
        # Convertir booleanos a enteros (0 o 1) para el modelo
        return [
            self.team_size,
            self.budget_k,
            self.duration_months,
            int(self.realtime_required),  # True -> 1, False -> 0
            int(self.needs_offline),      # True -> 1, False -> 0
            self.target_users,            # Se codificará más adelante con LabelEncoder
        ]

# Clase para manejar el conjunto de datos de proyectos
class ProjectDataset:
    def __init__(self, projects: List[Project]):
        # Lista de instancias Project
        self.projects = projects
        # Codificador para la variable categórica target_users
        self.user_encoder = LabelEncoder()
        # Codificador para la variable objetivo recommended_platform
        self.platform_encoder = LabelEncoder()
        
        # Ajustar los encoders usando los datos disponibles
        self._fit_encoders()

    def _fit_encoders(self):
        """
        Ajusta los LabelEncoders con los valores únicos
        de target_users y recommended_platform
        """
        # Extraer todos los valores de usuarios objetivo
        users = [p.target_users for p in self.projects]
        # Extraer todas las plataformas recomendadas (sin None)
        platforms = [p.recommended_platform for p in self.projects if p.recommended_platform is not None]
        # Ajustar los encoders para transformar texto a números
        self.user_encoder.fit(users)
        self.platform_encoder.fit(platforms)

    def get_features_labels(self):
        """
        Devuelve las matrices X (características) e y (etiquetas) ya codificadas
        para entrenar el modelo
        """
        X = []  # Lista de características para cada proyecto
        y = []  # Lista de etiquetas codificadas (enteros)
        for p in self.projects:
            features = p.to_features()  # Convertir atributos a lista
            # Codificar el atributo categórico target_users
            features[-1] = self.user_encoder.transform([features[-1]])[0]
            X.append(features)
            # Si existe plataforma recomendada, codificarla y añadir a y
            if p.recommended_platform is not None:
                y.append(self.platform_encoder.transform([p.recommended_platform])[0])
        return X, y

    def decode_platform(self, encoded_value: int) -> str:
        """
        Convierte un valor codificado de plataforma de vuelta a su nombre original
        """
        return self.platform_encoder.inverse_transform([encoded_value])[0]

# Clase que encapsula el modelo de recomendación basado en árbol de decisión
class PlatformRecommender:
    def __init__(self):
        # Inicializar el clasificador de árbol de decisión
        self.model = DecisionTreeClassifier()
        # Referencia al dataset usado (necesaria para decodificar y encodificar)
        self.dataset: Optional[ProjectDataset] = None

    def train(self, dataset: ProjectDataset):
        """
        Entrena el modelo usando el dataset proporcionado
        """
        self.dataset = dataset
        # Obtener características y etiquetas codificadas
        X, y = dataset.get_features_labels()
        # Ajustar el modelo a los datos
        self.model.fit(X, y)
        # (Opcional) Evaluar precisión en los datos de entrenamiento
        preds = self.model.predict(X)
        acc = accuracy_score(y, preds)
        print(f"Training accuracy: {acc:.2f}")  # Mostrar precisión de entrenamiento

    def predict(self, project: Project) -> str:
        """
        Predice la plataforma recomendada para un proyecto nuevo
        """
        if self.dataset is None:
            raise ValueError("El modelo no ha sido entrenado.")
        # Convertir atributos del proyecto a características numéricas
        feats = project.to_features()
        # Codificar el atributo target_users según el encoder entrenado
        feats[-1] = self.dataset.user_encoder.transform([feats[-1]])[0]
        # Hacer la predicción (valor entero)
        pred = self.model.predict([feats])[0]
        # Decodificar el entero de vuelta a la etiqueta original
        return self.dataset.decode_platform(pred)

# Bloque de ejemplo de uso y prueba rápida
if __name__ == "__main__":
    # Definir un conjunto de proyectos de ejemplo con plataforma conocida
    projects = [
        Project("AppGlobal", 5, 25.0, 6, True, False, "global", "web"),
        Project("IntranetCorp", 10, 40.0, 12, False, True, "empresa", "desktop"),
        Project("LocalDelivery", 3, 20.0, 4, True, True, "local", "mobile"),
        Project("CloudDashboard", 6, 50.0, 8, True, False, "empresa", "web"),
        Project("OfflineTool", 4, 15.0, 6, False, True, "local", "desktop"),
        Project("SocialBuzz", 2, 10.0, 3, True, False, "global", "mobile"),
    ]

    # Proyecto nuevo sin plataforma definida
    new_project = Project("AIChatApp", 4, 30.0, 5, True, False, "global")

    # Crear dataset y recomendador
    dataset = ProjectDataset(projects)
    recommender = PlatformRecommender()

    # Entrenar el modelo
    recommender.train(dataset)

    # Obtener y mostrar la predicción para el nuevo proyecto
    prediction = recommender.predict(new_project)
    print(f"Plataforma recomendada: {prediction}")
