Predecir el rendimiento de un jugador
游닇 Enunciado del ejercicio

Imagina que formas parte del equipo de desarrollo de un videojuego multijugador competitivo. El equipo de anal칤tica necesita predecir cu치ntas victorias podr칤a lograr un nuevo jugador, bas치ndose 칰nicamente en su estilo de juego.

Como cient칤fico de datos, tu misi칩n es crear un modelo de regresi칩n lineal que pueda predecir las victorias de un jugador en funci칩n de su rendimiento medio en partidas anteriores.

Para organizar bien tu soluci칩n y facilitar su reutilizaci칩n en el futuro, deber치s construirla utilizando tres clases bien definidas.

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

class Player:
    def __init__(self, name, avg_session_time, avg_actions_per_min, avg_kills_per_session, victories=None):
        self.name = name
        self.avg_session_time = avg_session_time
        self.avg_actions_per_min = avg_actions_per_min
        self.avg_kills_per_session = avg_kills_per_session
        self.victories = victories

    def to_features(self):
        """Devuelve una lista con los valores de entrada para el modelo."""
        return [self.avg_session_time, self.avg_actions_per_min, self.avg_kills_per_session]

class PlayerDataset:
    def __init__(self, players):
        self.players = players

    def get_feature_matrix(self):
        """Devuelve una lista de listas con los valores de entrada (X)."""
        features = [player.to_features() for player in self.players]
        return features

    def get_target_vector(self):
        """Devuelve una lista con los valores objetivo (y, las victorias)."""
        targets = [player.victories for player in self.players if player.victories is not None]
        return targets

class VictoryPredictor:
    def __init__(self):
        """Inicializa el predictor con un modelo de regresi칩n lineal."""
        self.model = LinearRegression()

    def train(self, dataset: PlayerDataset):
        """Entrena el modelo con los datos del dataset."""
        X = dataset.get_feature_matrix()
        y = dataset.get_target_vector()
        if y:  # Asegurarse de que haya datos para entrenar
            self.model.fit(X, y)
        else:
            print("Advertencia: No hay datos de victorias para entrenar el modelo.")

    def predict(self, player: Player):
        """Devuelve el n칰mero de victorias predichas para ese jugador."""
        features = [player.to_features()]
        prediction = self.model.predict(features)
        return prediction[0]

# Ejemplo de uso
players = [
    Player("Alice", 40, 50, 6, 20),
    Player("Bob", 30, 35, 4, 10),
    Player("Charlie", 50, 60, 7, 25),
    Player("Diana", 20, 25, 2, 5),
    Player("Eve", 60, 70, 8, 30)
]

dataset = PlayerDataset(players)
predictor = VictoryPredictor()
predictor.train(dataset)

test_player = Player("TestPlayer", 45, 55, 5)
predicted = predictor.predict(test_player)
print(f"Victorias predichas para {test_player.name}: {predicted:.2f}")
